;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(command-history evil-ex-history consult--grep-history consult--line-history minibuffer-history file-name-history extended-command-history))
(setq command-history '((debug) (execute-extended-command nil "debug" #("de" 0 2 (ws-butler-chg chg))) (evil-set-marker 97) (find-file "~/Workspace/dotfiles/doom/init.el" t) (evil-snipe-f nil '(58)) (evil-delete 2544 2573 'line) (evil-delete 2544 2545 'line) (evil-delete 2574 2607 'line) (evil-delete 2470 2471 'line) (evil-delete 2470 2471 'line) (evil-delete 2470 2545 'line) (evil-delete 2470 2520 'line) (evil-delete 2470 2555 'line) (evil-delete 2470 2525 'line) (evil-delete 2470 2471 'line) (evil-delete 2470 2499 'line) (evil-delete 2470 2528 'line) (evil-delete 2470 2471 'line) (evil-delete 2470 2486 'line) (evil-delete 2470 2504 'line) (evil-delete 2470 2485 'line) (evil-delete 2470 2549 'line) (evil-delete 2470 2524 'line) (evil-delete 2470 2542 'line) (evil-delete 885 943 'line) (evil-delete 885 932 'line) (evil-delete 885 902 'line) (evil-delete 885 886 'line) (evil-delete 885 961 'line) (evil-delete 885 955 'line) (evil-delete 885 912 'line) (evil-delete 885 948 'line) (evil-delete 885 928 'line) (evil-delete 885 886 'line) (evil-delete 885 972 'line) (evil-delete 885 950 'line) (evil-delete 885 898 'line) (evil-delete 885 886 'line) (evil-delete 885 973 'line) (evil-delete 885 967 'line) (evil-delete 885 932 'line) (evil-delete 885 886 'line) (evil-delete 885 950 'line) (evil-delete 885 952 'line) (evil-delete 885 938 'line) (evil-delete 885 938 'line) (evil-delete 885 947 'line) (evil-delete 885 909 'line) (evil-delete 885 913 'line) (evil-delete 885 902 'line) (evil-delete 885 910 'line) (evil-delete 885 894 'line) (evil-delete 885 886 'line) (evil-delete 885 931 'line) (evil-delete 885 907 'line) (evil-delete 885 886 'line) (evil-delete 885 886 'line) (evil-delete 885 916 'line) (evil-delete 885 921 'line) (evil-delete 885 963 'line) (evil-delete 885 931 'line) (evil-delete 885 943 'line) (evil-delete 885 977 'line) (evil-delete 885 946 'line) (evil-delete 885 947 'line) (evil-delete 885 945 'line) (evil-delete 885 956 'line) (evil-delete 885 966 'line) (evil-delete 885 963 'line) (evil-delete 885 906 'line) (evil-delete 885 886 'line) (evil-delete 885 975 'line) (evil-delete 885 911 'line) (evil-delete 885 914 'line) (evil-delete 885 921 'line) (evil-delete 885 918 'line) (evil-delete 885 916 'line) (evil-delete 885 917 'line) (evil-delete 885 893 'line) (evil-delete 885 886 'line) (evil-delete 885 929 'line) (evil-delete 885 945 'line) (evil-delete 885 894 'line) (evil-delete 885 886 'line) (evil-delete 885 928 'line) (evil-delete 885 928 'line) (evil-delete 885 929 'line) (evil-delete 885 926 'line) (evil-delete 885 925 'line) (evil-delete 885 902 'line) (evil-delete 885 886 'line) (evil-delete 885 917 'line) (evil-delete 885 922 'line) (evil-delete 885 911 'line) (evil-delete 885 886 'line) (evil-delete 2861 2862 'line) (evil-delete 2861 2862 'line) (evil-delete 2861 2881 'line) (evil-delete 2861 2883 'line) (evil-delete 99 100 'line)))
(setq minibuffer-history '("little-snippet/src/bin/future.rs" "~/Workspace/rustpracties/" "zsh/.zshenv" "~/Workspace/dotfiles/"))
(setq file-name-history '("~/Workspace/rustpracties/little-snippet/src/bin/future.rs" "~/Workspace/dotfiles/doom/init.el" "~/Workspace/dotfiles/doom/config.el" "~/Workspace/rustpracties/little-snippet/src/bin/future.rs" "~/Workspace/rustpracties/little-snippet/src/bin/synchronized.rs" "~/Workspace/rustpracties/little-snippet/Cargo.toml" "~/Workspace/rustpracties/little-snippet/src/bin/synchronized.rs" "~/Workspace/rustpracties/little-snippet/src/bin/thread.rs" "~/Workspace/rustpracties/little-snippet/src/bin/synchronized.rs" "~/Workspace/rustpracties/little-snippet/src/bin/thread.rs" "~/Workspace/dotfiles/zsh/.zshenv" "~/Workspace/rustpracties/little-snippet/src/bin/thread.rs" "~/.config/git/config"))
(setq extended-command-history '("debug" "doom/reload" "vterm" "doom/reload" "vterm"))
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq evil-jumps-history '((2529 #1="/Users/afu/Workspace/dotfiles/emacs/config/vk-elpaca.el") (12 #1#) (1266 "/Users/afu/Workspace/dotfiles/emacs/config/vk-frame.el") (2804 "/Users/afu/Workspace/dotfiles/doom/init.el") (431 "/Users/afu/Workspace/dotfiles/emacs/config/vk-frame.el") (1792 "/Users/afu/Workspace/dotfiles/emacs/lisp/custom/package-setup.el") (5118 "/Users/afu/Workspace/dotfiles/emacs/lisp/custom/base-setup.el") (1394 "/Users/afu/Workspace/dotfiles/emacs/lisp/edit/edit-setup.el") (1080 #2="/Users/afu/Workspace/dotfiles/doom/config.el") (1014 #2#) (944 #2#) (802 #3="/Users/afu/Workspace/rustpracties/little-snippet/src/bin/future.rs") (356 #3#) (700 #3#) (9 #3#) (632 #4="/Users/afu/Workspace/rustpracties/little-snippet/src/bin/synchronized.rs") (669 #4#) (632 #4#) (515 "/Users/afu/Workspace/rustpracties/little-snippet/Cargo.toml") (365 #4#) (309 #4#) (296 #4#) (1 #5="/Users/afu/Workspace/rustpracties/little-snippet/src/bin/thread.rs") (43 #4#) (58 #5#) (1010 "/Users/afu/Workspace/dotfiles/zsh/.zshenv") (673 "/Users/afu/Workspace/dotfiles/zsh/.zshenv")))
(setq kill-ring '(";" ";" " builds and activates Elpaca.

" ":ensure t :demand t)" ";; Required by `use-package'
" "
" "(use-package diminish :ensure t)
" ";; Keep ~/.emacs.d/ clean.
(use-package no-littering :ensure t :demand t)

;; Required by `use-package'
(use-package diminish :ensure t)" "
" "(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))
" ";;Useful for configuring built-in emacs features.
" ";;Note this will cause the declaration to be interpreted immediately (not deferred).
" ";;Turns off elpaca-use-package-mode current declartion
" "
" "(use-package evil :demand t)
" ";; Expands to: (elpaca evil (use-package evil :demand t))
" "
" ";;(elpaca-wait)
" ";;(use-package general :demand t)
" ";;For example:
" ";;use `elpaca-wait' to block until that package has been installed/configured.
" ";;(e.g. a package which adds a use-package key word),
" ";;When installing a package which modifies a form used at the top-level
" ";; Install use-package support
(elpaca elpaca-use-package
  ;; Enable :elpaca use-package keyword.
  (elpaca-use-package-mode)
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t))

;; Block until current queue processed.
(elpaca-wait)

;;When installing a package which modifies a form used at the top-level
;;(e.g. a package which adds a use-package key word),
;;use `elpaca-wait' to block until that package has been installed/configured.
;;For example:
;;(use-package general :demand t)
;;(elpaca-wait)

;; Expands to: (elpaca evil (use-package evil :demand t))
(use-package evil :demand t)

;;Turns off elpaca-use-package-mode current declartion
;;Note this will cause the declaration to be interpreted immediately (not deferred).
;;Useful for configuring built-in emacs features.
(use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

;; Don't install anything. Defer execution of BODY
(elpaca nil (message \"deferred\"))" "(defvar elpaca-installer-version 0.5)
(defvar elpaca-directory (expand-file-name \"elpaca/\" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name \"builds/\" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name \"repos/\" elpaca-directory))
(defvar elpaca-order '(elpaca :repo \"https://github.com/progfolio/elpaca.git\"
                              :ref nil
                              :files (:defaults (:exclude \"extensions\"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name \"elpaca/\" elpaca-repos-directory))
       (build (expand-file-name \"elpaca/\" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window \"*elpaca-bootstrap*\"))
                 ((zerop (call-process \"git\" nil buffer t \"clone\"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process \"git\" nil buffer t \"checkout\"
                                       (or (plist-get order :ref) \"--\"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil \"-Q\" \"-L\" \".\" \"--batch\"
                                       \"--eval\" \"(byte-recompile-directory \\\".\\\" 0 'force)\")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads \"elpaca\" repo)))
            (progn (message \"%s\" (buffer-string)) (kill-buffer buffer))
          (error \"%s\" (with-current-buffer buffer (buffer-string))))
      ((error) (warn \"%s\" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads \"elpaca\" repo)
    (load \"./elpaca-autoloads\")))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))" "frame" "(cond (vk-mac 150)
                                                      (t 100))" "(add-hook 'server-after-make-frame-hook #'vk/setup-fonts)
" "(add-hook 'window-setup-hook #'vk/setup-fonts)
" "(vk/setup-fonts)
" "
" "                      (set-fontset-font t 'han (font-spec :family font)))))
" "                      (setq face-font-rescale-alist `((,font . 1.0)))
" "             return (progn
" "    (cl-loop for font in '(\"Source Han Sans SC\" \"PingFang SC\")
" "    ;; Specify font for Chinese characters
" "
" "             return (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend))
" "    (cl-loop for font in '(\"Apple Color Emoji\" \"Segoe UI Emoji\")
" "    ;; Emoji
" "
" "             return (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend))
" "    (cl-loop for font in '(\"Symbols Nerd Font\" \"Symbols Nerd Font Mono\" \"Symbol\")
" "    ;; Specify font for all unicode characters
" "
" "                                                      (t 100))))
" "                                        :height (cond (vk-mac 150)
" "                                        :family font
" "             return (set-face-attribute 'default nil
" "    (cl-loop for font in '(\"Cascadia Code\" \"Source Code Pro\")
" "    ;; Set default font
" "  (when (display-graphic-p)
" "  \"Setup fonts.\"
" "(defun vk/setup-fonts ()
" ";; Fonts
" "
" "(global-display-fill-column-indicator-mode 1)
" ";; Display wrape line
" "
" "      word-wrap-by-category t)
" "      sentence-end-double-space nil
" "      sentence-end \"\\\\([。！？]\\\\|……\\\\|[.?!][]\\\"')}]*\\\\($\\\\|[ \\t]\\\\)\\\\)[ \\t\\n]*\"
" "      adaptive-fill-first-line-regexp \"^* *$\"
" "      adaptive-fill-regexp \"[ t]+|[ t]*([0-9]+.|*+)[ t]*\"
" "      uniquify-buffer-name-style 'post-forward-angle-brackets ; Show path if names are same
" "      desktop-save nil                  ; Close desktop save
" "      blink-cursor-mode nil             ; No eyes distraction
" "      auto-save-default nil             ; Disable auto save
" "      make-backup-files nil             ; Forbide to make backup files
" "      delete-by-moving-to-trash t       ; Deleting files go to OS's trash folder
" "      inhibit-compacting-font-caches t  ; Don’t compact font caches during GC
" "(setq visible-bell t
" "
" "              indent-tabs-mode nil)     ; Permanently indent with spaces, never with TABs
" "              tab-width 4
" "              fill-column 80
" "(setq-default major-mode 'text-mode
" "  (fset 'yes-or-no-p 'y-or-n-p))
" "    (setq use-short-answers t)
" "(if (boundp 'use-short-answers)
" ";; Misc
" "
" "      icon-title-format frame-title-format)
" "(setq frame-title-format '(\"Vinci & Kate's Gnu Emacs - %b\")
" ";; Title
" "
" "                            (fullscreen)))
" "                            (height . 0.9)
" "                            (width . 0.728)
" "                            (left . 0.5)
" "(setq initial-frame-alist '((top . 0.5)
" ";; Initial frame
" "
" "      frame-resize-pixelwise t)
" "(setq frame-inhibit-implied-resize t
" ";; Inhibit resizing frame
" "
" "
" "(require 'vk-frame)
" ";; Package management
" "
" "  (add-to-list 'load-path (file-name-as-directory dir)))
" "(let (dir (locate-user-emacs-file \"config\"))
" "
" "(setq custom-file (expand-file-name \"vk-custom.el\" user-emacs-directory))
" ";; Load `custom-file'
" "
" "(setq redisplay-skip-fontification-on-input t)
" "(setq fast-but-imprecise-scrolling t)
" "
" "(setq highlight-nonselected-windows nil)
" "(setq-default cursor-in-non-selected-windows nil)
" "
" "(setq idle-update-delay 1.0)
" ";; Optimization
" "
" "(setq debug-on-error init-file-debug)
" ";; --debug-init implies `debug-on-error'.
" "
" "(setq auto-mode-case-fold nil)
"))
(setq register-alist '((48 . ";; Display wrape line
(global-display-fill-column-indicator-mode 1)

;; Fonts -- todo  如何开启 otf 属性
;; (set-fontset-font t 'latin (font-spec :family \"Cascadia Code\" :otf '(latn nil (calt zero ss01) nil)))
(defun vk/setup-fonts ()
  \"Setup fonts.\"
  (when (display-graphic-p)
    ;; Set default font
    (cl-loop for font in '(\"Cascadia Code\" \"Source Code Pro\")
             when (vk/font-installed-p font)
             return (set-face-attribute 'default nil
                                        :family font
                                        :height (cond (vk-mac 150)
                                                      (t 100))))
    ;; latin -- open otf
    (cl-loop for font in '(\"Cascadia Code\")
             when (vk/font-installed-p font)
             return (set-fontset-font t 'latin (font-spec :family font :otf '(latn nil (calt zero ss01) nil))))

    ;; Specify font for all unicode characters
    (cl-loop for font in '(\"Symbols Nerd Font\" \"Symbols Nerd Font Mono\" \"Symbol\")
             when (vk/font-installed-p font)
             return (if (< emacs-major-version 27)
                        (set-fontset-font \"fontset-default\" 'unicode font nil 'prepend)
                      (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend)))

    ;; Emoji
    (cl-loop for font in '(\"Apple Color Emoji\" \"Segoe UI Emoji\")
             when (vk/font-installed-p font)
             return (cond
                     ((< emacs-major-version 27)
                      (set-fontset-font \"fontset-default\" 'unicode font nil 'prepend))
                     ((< emacs-major-version 28)
                      (set-fontset-font t 'symbol (font-spec :family font) nil 'prepend))
                     (t
                      (set-fontset-font t 'emoji (font-spec :family font) nil 'prepend))))

    ;; Specify font for Chinese characters
    (cl-loop for font in '(\"Source Han Sans CN\" \"PingFang SC\" \"Microsoft Yahei\" \"STFangsong\")
             when (vk/font-installed-p font)
             return (progn
                      (setq face-font-rescale-alist `((,font . 1.0)))
                      (set-fontset-font t 'han (font-spec :family font))))))
(vk/setup-fonts)
(add-hook 'window-setup-hook #'vk/setup-fonts)
(add-hook 'server-after-make-frame-hook #'vk/setup-fonts)
")))
(setq mark-ring 'nil)
(setq search-ring 'nil)
(setq regexp-search-ring 'nil)
