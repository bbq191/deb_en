#+TITLE: Personal GNU Emacs Config
#+AUTHOR: Vinci Xu & Kate Ma
#+DESCRIPTION: Vinci & Kate's personal Emacs config
#+OPTIONS: toc:7

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#straight-package-manager][Straight Package Manager]]
  - [[#speed-up-startup][Speed up startup]]
  - [[#user-func-and-const][User Func and Const]]
  - [[#neecessory-configes][Neecessory Configes]]
  - [[#necessory-packages][Necessory Packages]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#fonts][Fonts]]
  - [[#transparency][Transparency]]
  - [[#vertico][Vertico]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#diminish-org-indent-mode][Diminish Org Indent Mode]]
  - [[#org-tag-expands-quick][Org Tag Expands Quick]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Straight Package Manager
#+begin_src emacs-lisp
  (setq straight-repository-branch "develop")

  ;; Install straight.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Install use-package
  (straight-use-package 'use-package)

  ;; Configure use-package to use straight.el by default
  (use-package straight
    :custom
    (straight-use-package-by-default t))
#+end_src

** Speed up startup
添加一些必要的设置尽可能快速启动

#+begin_src emacs-lisp
  ;; Defer garbage collection further back in the startup process
  ;;(setq gc-cons-threshold most-positive-fixnum)
  ;; Adjust garbage collection thresholds during startup, and thereafter
  (let ((normal-gc-cons-threshold (* 1024 1024 1024))
        (init-gc-cons-threshold (* 2048 1024 1024)))
    (setq gcr-cons-threshold init-gc-cons-threshold)
    (add-hook 'emacs-startup-hook
      (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))
  
  ;; Prevent flashing of unstyled modeline at startup
  (setq-default mode-line-format nil)

  ;; Don't pass case-insensitive to `auto-mode-alist'
  (setq auto-mode-case-fold nil)

  ;; Load `custom-file'
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (add-hook 'after-init-hook (lambda () (load custom-file 'noerror)))
#+end_src

** User Func and Const
*** Function
**** Reload Init
This is just an example of how to create a simple function in Emacs.
Use this function to reload Emacs after adding changes to the config.
Yes, I am loading the user-init-file twice in this function, which is a hack because for some reason,
just loading the user-init-file once does not work properly.

#+begin_src emacs-lisp
(defun reload-init-file ()
  (interactive)
  (load-file user-init-file)
  (load-file user-init-file))
#+end_src

**** Adjust Opacity
This function from purcell.

#+begin_src emacs-lisp
(defun ikate/adjust-opacity (frame incr)
  "Adjust the background opacity of FRAME by increment INCR."
  (unless (display-graphic-p frame)
    (error "Cannot adjust opacity of this frame"))
  (let* ((oldalpha (or (frame-parameter frame 'alpha) 100))
         ;; The 'alpha frame param became a pair at some point in
         ;; emacs 24.x, e.g. (100 100)
         (oldalpha (if (listp oldalpha) (car oldalpha) oldalpha))
         (newalpha (+ incr oldalpha)))
    (when (and (<= frame-alpha-lower-limit newalpha) (>= 100 newalpha))
      (modify-frame-parameters frame (list (cons 'alpha newalpha))))))
#+end_src

**** Fix fullscreen
Fix blank screen issue on macOS.

#+begin_src emacs-lisp
  (defun fix-fullscreen ()
    "Address blank screen issue with child-frame in fullscreen.
  This issue has been addressed in 28."
    (and macsys
         (bound-and-true-p ns-use-native-fullscreen)
         (setq ns-use-native-fullscreen nil)))
#+end_src
*** Const
**** Is Mac
#+begin_src emacs-lisp
(defconst macsys (eq system-type 'darwin))
#+end_src

** Neecessory Configes
*** Misc Config
一些混合设置

#+begin_src emacs-lisp
  (if (boundp 'use-short-answers)
      (setq use-short-answers t)
    (fset 'yes-or-no-p 'y-or-n-p))
  
  (setq-default major-mode 'text-mode
                fill-column 80
                tab-width 4
                indent-tabs-mode nil)     ; Permanently indent with spaces, never with TABs

  (setq visible-bell t
        inhibit-compacting-font-caches t  ; Don’t compact font caches during GC
        delete-by-moving-to-trash t       ; Deleting files go to OS's trash folder
        make-backup-files nil             ; Forbide to make backup files
        auto-save-default nil             ; Disable auto save

        uniquify-buffer-name-style 'post-forward-angle-brackets ; Show path if names are same
        adaptive-fill-regexp "[ t]+|[ t]*([0-9]+.|*+)[ t]*"
        adaptive-fill-first-line-regexp "^* *$"
        sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*"
        sentence-end-double-space nil
        word-wrap-by-category t)
#+end_src

*** Part of GNU Emacs
**** Basic Setting
这些基础设置可以让我用的更顺手

#+begin_src emacs-lisp
  (desktop-save-mode 1)
  (save-place-mode 1)
  ;; hist setting
  (savehist-mode 1)
  (setq enable-recursive-minibuffers t ; Allow commands in minibuffers
        history-length 1000
        savehist-additional-variables '(mark-ring
                                                global-mark-ring
                                                search-ring
                                                regexp-search-ring
                                                extended-command-history)
        savehist-autosave-interval 300)
  ;; recentf setting
  (recentf-mode 1)
  (setq recentf-max-saved-items 300)
  ;; basic ui
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq use-file-dialog nil) ;; 关闭使用系统自带的文件选择对话框,使用Emacs自带的。
  (setq use-dialog-box nil) ;; 关闭使用系统自带的消息框,使用Emacs自带的。
  (setq inhibit-startup-screen t) ;; 阻止显示启动画面。
  (setq inhibit-startup-message t) ;; 阻止显示启动消息。
  (setq inhibit-startup-buffer-menu t) ;; 阻止显示启动缓冲区菜单。
  (setq window-resize-pixelwise t) ;; 设置窗口调整大小时以像素为单位。
  (setq frame-resize-pixelwise t);; 设置框架调整大小时以像素为单位。
  ;; line number
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
  (setq display-line-numbers-type 'relative)
  ;; 修改双向文字排版为从左到右
  (setq-default bidi-paragraph-direction 'left-to-right)
  (setq bidi-inhibit-bpa t)
#+end_src

*** Global Keybinding

#+begin_src emacs-lisp
  (with-no-warnings
    ;; Key Modifiers
    (setq mac-option-modifier 'meta
      mac-command-modifier 'super)
    (bind-keys ([(super a)] . mark-whole-buffer)
           ([(super c)] . kill-ring-save)
           ([(super l)] . goto-line)
           ([(super q)] . save-buffers-kill-emacs)
           ([(super s)] . save-buffer)
           ([(super v)] . yank)
           ([(super w)] . delete-frame)
           ([(super z)] . undo)))
  ;; reload init
  (bind-keys ("C-c r" . reload-init-file))
  ;; recent file
  (bind-keys ("C-x C-r" . recentf-open-files))
  ;; zooming in/out
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  ;; 调整界面 opacity
  (global-set-key (kbd "M-C-8") (lambda () (interactive) (ikate/adjust-opacity nil -2)))
  (global-set-key (kbd "M-C-9") (lambda () (interactive) (ikate/adjust-opacity nil 2)))
  (global-set-key (kbd "M-C-7") (lambda () (interactive) (modify-frame-parameters nil `((alpha . 100)))))
#+end_src

** Necessory Packages
*** Diminish

#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

*** General Keybinding
使用general进行按键绑定

#+begin_src emacs-lisp
  (use-package general)
#+end_src

*** Marginalia
Marginalia is painless to set up

#+begin_src emacs-lisp
  (use-package marginalia
    :general
    (:keymaps 'minibuffer-local-map
              "M-A" 'marginalia-cycle)
    :custom
    (marginalia-max-relative-age 0)
    (marginalia-align 'right)
    :init
    (marginalia-mode))
#+end_src

*** Icons Completion
Note: All-the-icons-completion depends on an already installed all-the-icons.

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init (all-the-icons-completion-mode))
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS 
** Fonts
设置自己喜欢的字体

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
      :font "Cascadia Code"
      :height 130
      :weight 'regular)
  (set-face-attribute 'variable-pitch nil
      :font "Symbols Nerd Font"
      :height 130
      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
      :font "FiraCode Nerd Font"
      :height 130
      :weight 'regular)

  (set-face-attribute 'font-lock-keyword-face nil
      :slant 'italic)
  (set-face-attribute 'font-lock-comment-face nil
      :slant 'italic)

  (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-13"))
  (setq-default line-spacing 0.12)
#+end_src

** Transparency
Emacs 最新 True Transparency 模式 +(add-to-list 'default-frame-alist '(alpha-background . 90))+ 在 Mac 下并不生效，

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (add-hook 'window-setup-hook #'fix-fullscreen)
    (and macsys (bind-key "C-s-f" #'toggle-frame-fullscreen)))
#+end_src

** Vertico
Vertico is a minibuffer interface, that is, it changes the minibuffer looks and how you interact with it.

#+begin_src emacs-lisp
(use-package vertico
  :demand t                             ; Otherwise won't get loaded immediately
  :straight (vertico :files (:defaults "extensions/*") ; Special recipe to load extensions conveniently
                     :includes (vertico-indexed
                                vertico-flat
                                vertico-grid
                                vertico-mouse
                                vertico-quick
                                vertico-buffer
                                vertico-repeat
                                vertico-reverse
                                vertico-directory
                                vertico-multiform
                                vertico-unobtrusive
                                ))
  :general
  (:keymaps '(normal insert visual motion)
   "M-." #'vertico-repeat
   )
  (:keymaps 'vertico-map
   "<tab>" #'vertico-insert ; Set manually otherwise setting `vertico-quick-insert' overrides this
   "<escape>" #'minibuffer-keyboard-quit
   "?" #'minibuffer-completion-help
   "C-M-n" #'vertico-next-group
   "C-M-p" #'vertico-previous-group
   ;; Multiform toggles
   "<backspace>" #'vertico-directory-delete-char
   "C-w" #'vertico-directory-delete-word
   "C-<backspace>" #'vertico-directory-delete-word
   "RET" #'vertico-directory-enter
   "C-i" #'vertico-quick-insert
   "C-o" #'vertico-quick-exit
   "M-o" #'kb/vertico-quick-embark
   "M-G" #'vertico-multiform-grid
   "M-F" #'vertico-multiform-flat
   "M-R" #'vertico-multiform-reverse
   "M-U" #'vertico-multiform-unobtrusive
   "C-l" #'kb/vertico-multiform-flat-toggle
   )
  :hook ((rfn-eshadow-update-overlay . vertico-directory-tidy) ; Clean up file path when typing
         (minibuffer-setup . vertico-repeat-save) ; Make sure vertico state is saved
         )
  :custom
  (vertico-count 13)
  (vertico-resize t)
  (vertico-cycle nil)
  ;; Extensions
  (vertico-grid-separator "       ")
  (vertico-grid-lookahead 50)
  (vertico-buffer-display-action '(display-buffer-reuse-window))
  (vertico-multiform-categories
   '((file reverse)
     (consult-grep buffer)
     (consult-location)
     (imenu buffer)
     (library reverse indexed)
     (org-roam-node reverse indexed)
     (t reverse)
     ))
  (vertico-multiform-commands
   '(("flyspell-correct-*" grid reverse)
     (org-refile grid reverse indexed)
     (consult-yank-pop indexed)
     (consult-flycheck)
     (consult-lsp-diagnostics)
     ))
  :init
  (defun kb/vertico-multiform-flat-toggle ()
    "Toggle between flat and reverse."
    (interactive)
    (vertico-multiform--display-toggle 'vertico-flat-mode)
    (if vertico-flat-mode
        (vertico-multiform--temporary-mode 'vertico-reverse-mode -1)
      (vertico-multiform--temporary-mode 'vertico-reverse-mode 1)))
  (defun kb/vertico-quick-embark (&optional arg)
    "Embark on candidate using quick keys."
    (interactive)
    (when (vertico-quick-jump)
      (embark-act arg)))

  ;; Workaround for problem with `tramp' hostname completions. This overrides
  ;; the completion style specifically for remote files! See
  ;; https://github.com/minad/vertico#tramp-hostname-completion
  (defun kb/basic-remote-try-completion (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-try-completion string table pred point)))
  (defun kb/basic-remote-all-completions (string table pred point)
    (and (vertico--remote-p string)
         (completion-basic-all-completions string table pred point)))
  (add-to-list 'completion-styles-alist
               '(basic-remote           ; Name of `completion-style'
                 kb/basic-remote-try-completion kb/basic-remote-all-completions nil))
  :config
  (vertico-mode)
  ;; Extensions
  (vertico-multiform-mode)

  ;; Prefix the current candidate with “» ”. From
  ;; https://github.com/minad/vertico/wiki#prefix-current-candidate-with-arrow
  (advice-add #'vertico--format-candidate :around
                                          (lambda (orig cand prefix suffix index _start)
                                            (setq cand (funcall orig cand prefix suffix index _start))
                                            (concat
                                             (if (= vertico--index index)
                                                 (propertize "» " 'face 'vertico-current)
                                               "  ")
                                             cand)))
  )
#+end_src

* ORG MODE
** Enabling Table of Contents
#+begin_src emacs-lisp
(use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
完全关闭 electric indent 自动缩进功能,防止自动缩进带来的意外问题。

#+begin_src emacs-list
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Diminish Org Indent Mode
Removes "Ind" from showing in the modeline.

#+begin_src emacs-lisp
  (eval-after-load 'org-indent '(diminish 'org-indent-mode))
  (custom-set-faces
   '(org-level-1 ((t (:inherit outline-1 :height 1.7))))
   '(org-level-2 ((t (:inherit outline-2 :height 1.6))))
   '(org-level-3 ((t (:inherit outline-3 :height 1.5))))
   '(org-level-4 ((t (:inherit outline-4 :height 1.4))))
   '(org-level-5 ((t (:inherit outline-5 :height 1.3))))
   '(org-level-6 ((t (:inherit outline-5 :height 1.2))))
   '(org-level-7 ((t (:inherit outline-5 :height 1.1)))))
#+end_src

** Org Tag Expands Quick
其他快捷展开示例:

| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp 
(require 'org-tempo)
#+end_src
